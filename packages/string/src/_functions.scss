// ============================================================================================= //
//                                           FUNCTIONS                                           //
// ============================================================================================= //

@use "sass:map";
@use "sass:string";
@use "@unsass/types" as type;

///
/// Replace.
///
@function replace($string, $query, $replace: "") {
    $index: string.index($string, $query);

    @if $index {
        @return string.slice($string, 1, $index - 1) + $replace + replace(string.slice($string, $index + string.length($query)), $query, $replace);
    }

    @return $string;
}

///
/// To number.
///
@function to-number($value) {
    $numbers: ("0": 0, "1": 1, "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8, "9": 9);
    $result: 0;

    @for $i from 1 through string.length($value) {
        $character: string.slice($value, $i, $i);
        $result: $result * 10 + map.get($numbers, $character);
    }

    @return $result;
}

///
/// From number.
///
@function from-number($value) {
    @return #{$value};
}

///
/// Starts with.
///
@function starts-with($string, $substring) {
    @if string.index($string, $substring) {
        @return true;
    }

    @return false;
}

///
/// Ends with.
///
@function ends-with($string, $substring) {
    @if (string.slice($string, (string.length($string) - string.length($substring) + 1)) == $substring) {
        @return true;
    }

    @return false;
}

///
/// Trim start.
///
@function trim-start($string, $target: " ") {
    @if string.slice($string, 1, string.length($target)) == $target {
        $string: string.slice($string, string.length($target) + 1);
    }

    @return $string;
}

///
/// Trim end.
///
@function trim-end($string, $target: " ") {
    @if string.slice($string, -1 * string.length($target)) == $target {
        $string: string.slice($string, 1, -1 * string.length($target) - 1);
    }

    @return $string;
}

///
/// Trim.
///
@function trim($string, $start: " ", $end: $start) {
    @return trim-start(trim-end($string, $end), $start);
}

///
/// Combine.
///
@function combine($values...) {
    $token: "";

    @each $value in $values {
        @if $value {
            @if $token == "" {
                $token: $value;
            } @else {
                $token: #{$token}-#{$value};
            }
        }
    }

    @return $token;
}
